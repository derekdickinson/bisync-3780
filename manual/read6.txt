@CHAPTER HEAD = Command Summary by Class

<$M[Sumstrt]>This section lists all the commands and has some fundamentals 
about how and when they should be used. The following sections have 
in depth descriptions of some of these classes of commands. Chapter 
<$R[C#,Comsum]7> has in depth descriptions of every command.

@MINOR HEAD = Branching Control Commands

These commands affect the the logical flow of the script files. Section 
<$R[S*,Branches]6.1> discusses this class of command in detail. The 
commands:

@HORIZ LIST = call clrca end go if ife ifef ifi ifo ifp ifs ift il 
on ret xb

@MINOR HEAD = Quick and Dirty

File Commands These commands allow some simple file manipulation. 
Section <$R[S*,Filecmds]6.2> discusses these commands in more detail.

The commands:

@HORIZ LIST = app load save

@MINOR HEAD = File Commands using handles

These commands allow some extensive file manipulation. Section <$R[S*,Filecmds]6.2> 
discusses these commands in more detail.

The commands:

@HORIZ LIST = astat clall close frite fstat gbuf open pbuf rdln read 
seek tell

@MINOR HEAD = Other File Commands

These commands are copies of standard DOS commands. Section <$R[S*,Filecmds]6.2> 
discusses file commands.

The commands:

@HORIZ LIST = del dir er ld size ren

@MINOR HEAD = Communications Buffering Commands

These commands are used to save incoming data so that it can be easily 
manipulated within the command language. The individual descriptions 
of these commands in Chapter <$R[C#,Comsum]7> provide more detail.

@HORIZ LIST = bdn bdp buf

@OUTDENT ITEM = 

@MINOR HEAD = String Processing Commands

These commands provide a variety of string and memory manipulation 
features. Sections <$R[S*,Copcmds]6.4>, <$R[S*,Memcmds]6.5> and <$R[S*,Poicmds]6.6> 
provide more detail as to their operation.

@HORIZ LIST = allst cat cpy lwr setbf slen sptr srite stc stst upr

@MINOR HEAD = Connection Control Commands

These commands are used to establish and break connections with a 
host or another PC.

@HORIZ LIST = aa c dl ds kl m

@MINOR HEAD = Modem Diagnostic Commands

These commands are used to test and determine the type of modem in 
the PC. The are primarily used if the modem or its configuration is 
suspect.

@HORIZ LIST = mo mome mv

@MINOR HEAD = General Diagnostic Commands

These commands provide diagnostic capabilities for debugging command 
files, determining what is occurring on the line and storing logs 
of information to disk.

@HORIZ LIST = astat dt lf ss st svals td tr vals

@MINOR HEAD = General Commands

@HORIZ LIST = ? * comp da help intrp p redir rstrt tk uncmp w

@MINOR HEAD = DOS Call Commands

These commands allow the <$R[V*,Packname]D3-3780> script files to 
call DOS and execute batch and/or executable programs. See Section 
<$R[S*,DOScmds]6.3> for more information on these commands.

@HORIZ LIST = >> . /

@MINOR HEAD = Sending Commands

These commands send information to the remote computer and sometimes 
request information back from the remote.

@HORIZ LIST = rem s ss svals

@MINOR HEAD = Receive Control Commands

These commands control the file names and buffer conversions used 
for files received.

@HORIZ LIST = dn dp w

@MINOR HEAD = Screen Control Commands

These commands control the appearance of <$R[V*,Packname]D3-3780>. 
More information on how these commands can be used to control the 
screen is provided in Section <$R[S*,Scrcmds]6.7> and Chapter <$R[C#,Scrcust]8>.

@HORIZ LIST = cls drite dsup getxt key lscrn lstvs putxt redsp rite 
stoff ston sup undsp unsup vtype

@MINOR HEAD = Number Manipulation Commands

These commands are used to perform numeric calculations and assignment 
on integer, character and pointer variables.

@HORIZ LIST = dec inc mov opr

@MINOR HEAD = Program Termination Commands

These commands terminate the script file and/or <$R[V*,Packname]D3-3780>.

@HORIZ LIST = enz end ex fq q qnz

@MINOR HEAD = Memory Allocation Commands

These commands allocate memory, free previously allocated memory and/or 
adjust the size of previously allocated memory. Section <$R[S*,Memcmds]6.5> 
discusses these commands in detail.

@HORIZ LIST = alloc allst free reall

@MINOR HEAD = System Initialization Commands

These commands are used to set up and modify the system's configuration. 
Chapters <$R[C#,Comsum]7> and <$R[C#,Confile]9> have detailed descriptions 
of these commands and their usage.

@HORIZ LIST = lscrn lstvs mseth sdefs setpr sform smask smax so sptyp 
tabls vtype

@SECTION HEAD = Branching Control Commands

<$M[Branches]>The branching commands are commands which cause a script 
file to resume execution at another line in the file. The destination 
of branch can be a label, absolute line number, relative line number 
or a <$R[V*,Packname]D3-3780> command.

If the destination is a label then execution will begin at the line 
following the label. All labels must begin with a colon <169>:<170>.

If the destination is a number and is not placed in <169><<>><170> symbols 
then it is assumed to be an absolute line number. If the number is 
placed within the <169><<>><170> symbols then the number is added to 
the current line number and execution will continue there. The number 
can be negative if placed within the <169><<>><170> symbols (thus branching 
up that number of lines).

If a quoted string is included in the destination field then the string 
is assumed to be a <$R[V*,Packname]D3-3780> command. The command will 
be executed and (unless the command is another branch command) execution 
will continue on the following line.

If a destination field is left blank (two consecutive commas or no 
<169>=<170> sign in an ON command) then execution will continue on 
the next line as if no branch command had been encountered.

The ON command is used to branch to different locations depending 
on the value of a variable. The following example demonstrates all 
four types of branch destinations (the values to the immediate right 
of the <169>=<170> signs are destinations).

Example: 

@EXAMPLES = 1. * The "*" that starts this line makes it a comment. 


@EXAMPLES = 2. 

@EXAMPLES = 3. * The "dl" command below will set the ei variable 

@EXAMPLES = 4. dl "1-(205)-881-8183" 

@EXAMPLES = 5. on %ei,0=:lbl,1="ex",2=<-><<-2>>,4=3 

@EXAMPLES = 6. 

@EXAMPLES = 7. * If ei is 0 then execution will begin at label 

@EXAMPLES = 8. :lbl 

@EXAMPLES = 9. * This line will execute if dl is successful. 

If the value of EI is 0 then execution will continue on the line following 
the label <169>:lbl<170> (in this case line 9). If EI=1 then the command 
EX will be executed to leave <$R[V*,Packname]D3-3780>. If EI=2 then 
execution will continue on line (6-2)=4 which contains the DL command. 
Notice that the line counter is equal to the line after the current 
line (6 rather than 5). This means that a <169>-2<170> is required 
to go to one line backward. if EI=4 then execution will begin at line 
3. Otherwise execution will continue at line 6 as if no branch had 
occured.

An option which is significant to operation of the branching commands 
has to do with the mb variable. This variable determines if the branch 
locations will be determined by a table in memory or whether the file 
will be searched for the appropriate value. The memory table executes 
much faster but requires a fair amount of RAM. This variable defaults 
to 1 which means memory branching. If the value is set to 0 then branches 
will be performed by file searches. The value applies to the initial 
script file and any files loaded using the XB or CALL commands (the 
configuration file never uses memory branching). If you are using 
some large buffers in your script file and get the <169><F1P10M>Insufficient 
internal memory<F255P255D><170> error (number 93). Then you may want to 
set the value of mb to zero in the configuration file.

If there is insufficient internal memory to perform memory branching 
then file based branching will automatically be used.

@SECTION HEAD = File Commands

<$M[Filecmds]>There are three classes of file functions: <F2M>Quick 
and Dirty<F255D>, <F2M>Commands using Handles<F255D> and the <F2M>Other file commands<F255D>. 


We'll start with <F2M>Commands using Handles<F255D>. The first parameter 
in these commands is a number which is associated with the a specific 
file. This number is referred to as a <MI>File Handle<D>. The allowed 
file handles are 0 through 9. Before any of the handle based file 
operations can be used the file must be OPENed to associate the file 
with the <MI>handle<D> (that is the sole purpose of the OPEN command). 
This command creates a file if the file doesn't already exist or opens 
the file for read only if it does exist (this can be changed using 
an options parameter). When you are through processing a file the 
CLOSE command is used to free up the desired <MI>handle<D>.

There is an implied location in the <MI>handle<D> based commands at 
which reads and writes occur. This location is referred to as the 
file pointer. The SEEK command is used to explicitly move the location 
of the file pointer and the TELL is used to read the location of the 
file pointer. The file pointer is advanced whenever a read or write 
is performed on the file. In this way, successive reads will continue 
to read through the file from beginning to end and successive writes 
will continue to append data to an open file.

The <F2M>Quick and Dirty<F255D> file commands save you the trouble of having 
to open, close, etc. files. These commands need only the file's name 
as a parameter. The main drawback of the <F2M>Quick and Dirty<F255D> commands 
is that they can only work on a buffer full of data at one time. For 
example, there is no way to read a part of a file which is farther 
in the file than the size of your buffer. However, many operations 
can be done simply by using these commands.

The other file commands are essentially DOS replacements that stop 
you from constantly having to shell to DOS. There are also some alias 
command names (ER for DEL and LD for DIR) which are included for compatibility 
with the Bsc command language.

@SECTION HEAD = DOS Call commands

<$M[DOScmds]>The DOS call commands allow <$R[V*,Packname]D3-3780> 
script files to call other programs, batch files and built in DOS 
commands (such as COPY). 

The <169>>><170> and <169>.<170> are useful only when running interactive 
since they require a key to be pressed before returning to DOS. The 
<169>/<170> is useful even as a remote command or when the DOS command 
does not display useful information.

There are several possible problems when calling another program however:

The DOS program may destroy the screen. Since a DOS program is not 
aware what <$R[V*,Packname]D3-3780> may have displayed it is likely 
to write over valid parts of the screen. The REDSP command can be 
used to regenerate the direct screen after running the DOS command. 
Also, the output of many DOS programs can be redirected to a file. 
The contents of the file can then be written to the screen using <$R[V*,Packname]D3-3780>'s 
video writes. There may not be sufficient far memory to run the program. 
If there is not enough memory to run the program then there is little 
that can be done in <$R[V*,Packname]D3-3780>. The only things are 
to get rid of excess memory resident programs. When running unattended 
the DOS Program may expect user interaction. If the DOS shell is loaded 
as a remote command on an unattended PC (see the REM command) then 
the remote will <169>hang up<170> waiting for keyboard input. If a 
program can accept redirection then the input to the remote program 
can come from a file. Otherwise, the program cannot be run on unattended 
remotes. The program called may be so time consuming that messages 
are missed. If a program takes a large amount of time at run time 
then <$R[V*,Packname]D3-3780> may miss activity on the line. Fortunately, 
it takes from 10-30 seconds for a communication to fail and then it 
can be retried until successful. Despite these possible problems the 
DOS shell command is a very powerful command. It is especially useful 
when running a remote unattended. See the description of the REM command 
in Chapter <$R[C#,Comsum]7> for more information on these features.

@SECTION HEAD = Data Copying Commands (determination of buffer length)

<$M[Copcmds]>The data copying commands take data from one location 
(or file) and store it at another location (or file). The locations 
in memory are referred to using pointer variables. The commands use 
similar techniques to determine the length of their arguments. The 
commands which this refers to are:

@SYMBOL NAME = Source Lengths:

@SYMBOL ITEM = app pbuf save

@SYMB DES NAME = Destination Lengths:

@SYMBOL ITEM = bdn bdp buf cat cpy gbuf load rdln setbf 

There are five ways in which the length of the buffer may be determined: 


@OUTDENT ITEM = 1. For string operations by copying until a hex 0 
is reached. If manipulating strings, then the first actual <169>0<170> 
(not an ASCII 0 but the actual number 0) will indicate the length 
of the source.

@OUTDENT ITEM = 2. Limited length of source data. If the source data 
is of limited size then it is common for the buffer to be larger than 
the size of the data being copied.

@OUTDENT ITEM = 3. By passing a length. This value is merely a positive 
integer indicating how many bytes to use at the location pointed to. 
If it is larger than the amount of space allocated at the location 
then an error will be generated. 

@OUTDENT ITEM = 4. By passing a pointer to the first location NOT 
to be overwritten. If a buffer created with a single ALLOC command 
is being used for more than one thing and the first part of the buffer 
is being used for the desired operation then the pointer to the second 
buffer can be passed. This will assure that the memory at and beyond 
the second value is protected. 

@OUTDENT ITEM = 5. By using the built in length value for the value. 
Pointer variables carry around an internal variable which indicates 
the number of bytes to the end of the buffer they point to. This is 
generally the default value if the length parameter is left blank.

Some commands use the hex 0 in the file detected in the source to 
stop the transfer and others do not. Refer to the individual command 
descriptions to determine if the command treats a 0 specially. The 
explanation of the APP command in Chapter <$R[C#,Comsum]7> has examples 
of several of these length specifications being used.

@SECTION HEAD = Memory Allocation Commands

<$M[Memcmds]>These commands control the dynamic allocation of memory. 
Sections <$R[S*,Poifunds]5.6> and <$R[S*,Poierrs]5.7> have a great 
deal of relevant information concerning the use of the pointers with 
these commands. There are a couple of points I want to emphasize here:

@OUTDENT ITEM = 1. The ALLOC, ALLST and REALL commands set the length 
value associated with the pointers which are passed to them as arguments. 
This value will be used by most data movement commands.

@OUTDENT ITEM = 2. The ALLOC and ALLST commands will automatically 
free any non-NULL pointers that are passed to them. If you keep reusing 
the same pointer then an intervening FREE command is not required. 
However, if a pointer is non-NULL but does not point to dynamically 
allocated memory then it should be set to NULL before using it as 
an argument to one of these commands.

The individual descriptions of these commands in Chapter <$R[C#,Comsum]7> 
will supply more detailed descriptions of them.

@SECTION HEAD = Other pointer assignment commands

<$M[Poicmds]>Three commands can be used to assign values to pointer 
variables that to not allocate memory at the same time:

@HORIZ LIST = mov stc stst 

When these assignments are made then the length values associated 
with these pointers must also be set. In all cases the length value 
will be set to indicate the number of bytes from the location that 
the pointer points to and the end of the allocated buffer into which 
it points.

For example:

@EXAMPLES = alloc %p0,500 

@EXAMPLES = mov %p1,&p0[100]

The length of p1 will be 400=500-100. In this way the end of the buffer 
will not be overwritten in the data movement commands.

@SECTION HEAD = Screen Control Commands

<$M[Scrcmds]>The screen control commands are covered in extreme detail 
in Chapter <$R[C#,Scrcust]8>. Here we will discuss some of the fundamentals. 
The next section will explain the RITE command and give examples.

In the <$R[V*,Packname]D3-3780> package there are fundamentally two 
different kinds of screen writes: Serial and Direct. The Serial writes 
take place in a window which scrolls upward as more information is 
written. This window contains the flashing cursor and video writes 
always begin at the cursor. The cursor will remain at the line following 
a serial write. Direct writes can be written anywhere on the screen 
without regard to the cursor and do not (normally) affect the cursor. 
The words <MI>serial<D> and <MI>direct<D> will be used frequently 
in the following descriptions. The commands affect the different kinds 
of writes as such:

@MINOR HEAD = Commands which affect Serial Writes Only:

@HORIZ LIST = cls key rite sup unsup

@MINOR HEAD = Commands which affect Direct Writes Only:

@HORIZ LIST = lscrn lstvs drite stoff ston dsup undsp

@MINOR HEAD = Commands which affect both Serial and Direct Writes:

@HORIZ LIST = redsp getxt putxt vtype

Generally, the serial writes are the simplest but least powerful tools 
to the script file programmer. If you merely want to throw up some 
messages to inform the user what is going on then the serial writes 
are the way to go. If you are wanting to give the package a different 
look (possibly to match an application) then the direct writes will 
be very important to you. See Chapter <$R[C#,Scrcust]8> for more on 
direct writes. Section (<$R[S*,Formops]6.8>) and the command summaries 
in Chapter <$R[C#,Comsum]7> supply all that is necessary to use the 
serial writes effectively.

Several of the video commands are complementary in that one command 
<169>undoes<170> the other command. These commands are:

@Z_TBL_BEG = COLUMNS(3), DIMENSION(IN), COLWIDTHS(E1,E1,E3), HGUTTER(.0560), 
VGUTTER(.0560), BOX(Z_DOUBLE), HGRID(Z_SINGLE), VGRID(Z_SINGLE), KEEP(ON), 
L2(R1C0..R1C3)

@Z_TBL_BODY = TABLE TEXT, TABLE TEXT, TABLE TEXT

Command 1<$!B11>, Command 2<$!B11>, Description<$!B11>

SUP, UNSUP, Suppresses /Unsuppresses serial writes

STOFF, STON, Suppresses/Unsuppresses status variable writes

DSUP, UNDSP, Suppresses/Unsuppresses direct writes

GETXT, PUTXT, Saves/Restores a window on the screen

@Z_TBL_END = 

@OUTDENT ITEM = 

@SECTION HEAD = Format options for writing strings out

<$M[Formops]>The <$R[V*,Packname]D3-3780> command language has several 
commands that allow you to write strings and numbers out. These are:

@LIST = rite	For writing to the screen

@LIST = frite	For writing to a file

@LIST = srite	For writing to a buffer

These three functions all have a similar syntax in that they all will 
accept multiple parameters which can be any combination of scalars 
and pointers. I'll use the <169>rite<170> function for the examples 
(since you can immediately see the results of your command).

The basic syntax of the rite function is:

@LIST = rite <MI>val<D>[;<MI>ops<D>][+<MI>val<D>[;<MI>ops<D>]][+<MI>val<D>[;<MI>ops<D>]]...

or (with brackets removed)

@LIST = rite <MI>val<D>;<MI>ops<D>+<MI>val<D>;<MI>ops<D>+...

The <MI>val<D> is any scalar or pointer and the <MI>ops<D> consist 
of a string (not necessarily quoted) that modifies the way the <MI>val<D> 
is output.

Lets start with some simple examples (remember that the <169>?<170> 
is a prompt):

Writing a string

@EXAMPLES = ?rite "This will be written to the screen"

@EXAMPLES = This will be written to the screen

Writing a string variable

@EXAMPLES = ?cpy %db,"This will also be written to the screen"

@EXAMPLES = ?rite %db

@EXAMPLES = This will also be written to the screen

Writing a scalar

@EXAMPLES = ?mov %i0,89 

@EXAMPLES = ?rite %i0

@EXAMPLES = 89

Writing a combination of strings and scalars

@EXAMPLES = ?rite "The number "+h40+" is 40 hex"

@EXAMPLES = The number 64 is 40 hex

The last example demonstrates how values can be concatenated. Now, 
lets go over some of the formatting options. A formatting option is 
a string that has combinations of letters and numbers to precisely 
control the output. Unlike most strings, the quotes surrounding it 
can (normally) be left off. The general form of the options is:

@LIST =  [flags][width][.precision]type

Each field of the string is a single character or number signifying 
a particular format option. The following describes each field.

@LIST EDGE = Type:

@LIST I NEAR = The 'type' character determines whether the associated 
argument is interpreted as a character, string, or integer. The simplest 
format string contains only a 'type' character.

@Z_TBL_BEG = COLUMNS(3), DIMENSION(IN), COLWIDTHS(E1,E2,E6), HGUTTER(.0560), 
VGUTTER(.0560), BOX(Z_DOUBLE), HGRID(Z_SINGLE), VGRID(Z_SINGLE), KEEP(ON), 
L2(R1C0..R1C3)

@Z_TBL_BODY = TABLE TEXT, TABLE TEXT, TABLE TEXT

Type<$!B11>, Scalar/Pointer<$!B11>, Usage<$!B11>

D or I, Scalar, Signed Decimal Integer (scalar default)

U, Scalar, Unsigned decimal integer

O, Scalar, Unsigned octal integer

X, Scalar, Unsigned hexadecimal integer

C, Scalar, Single character

S, Pointer, Only way to print a string (pointer default)

@Z_TBL_END = 

Examples:

@EXAMPLES = <P10M>?rite "The number "+64;d+" is "+64;x+" hex" <P255D>

@EXAMPLES = <P10M>The number 64 is 40 hex<P255D>

@EXAMPLES = <P10M>?rite "The signed number "+<<-<->34>>;d+" is "+<-><<-34>>;u+" 
in two's complement" <P255D>

@EXAMPLES = <P10M>The signed number -34 is 65502 in two's complement<P255D>

@EXAMPLES = <P10M>?rite "The number "+'A';d+" is an ASCII '"+65;c+"'"

@EXAMPLES = The number 65 is an ASCII 'A'

@LIST EDGE = Flags:

@LIST I NEAR = An optional sequence of flag characters controls the 
justification of output and printing of signs and blanks. The flag 
characters available are:

@Z_TBL_BEG = COLUMNS(3), DIMENSION(IN), COLWIDTHS(E1,E5,E3), HGUTTER(.0560), 
VGUTTER(.0560), BOX(Z_DOUBLE), HGRID(Z_SINGLE), VGRID(Z_SINGLE), KEEP(ON), 
L2(R1C0..R1C3)

@Z_TBL_BODY = TABLE TEXT, TABLE TEXT, TABLE TEXT

Flag<$!B11>, Action<$!B11>, Default<$!B11>

-, Left Justify  the result within the field width, Right Justify

++, Prefix the output value with a + or - sign if it is of a signed 
type, Sign appears only for negative signed values

blank, Prefix the output value with a blank if the output value is 
signed and positive; the + flag overrides the blank flag, No blank

@Z_TBL_END = 

If the <169>+<170> or blank is used then the options string must be 
enclosed in double quotes (") characters to stop those signs from 
being interpreted as parameter separators. Both these options are 
useful for lining up columns of numbers. More than one flag can be 
included in the option list.

Example Using Flags (more examples using flags will be with width 
info):

@EXAMPLES = <P10M>?rite "This value will always be prefixed with a 
sign "+90;"+d" <P255D>

@EXAMPLES = <P10M>This value will always be prefixed with a sign +90<P255D>

@LIST EDGE = Width:

@LIST I NEAR = The optional width specifier is a decimal integer specifying 
the minimum number of characters to print, padding with blanks and 
zeros. Width never causes a value to be truncated.

Examples using Width:

@EXAMPLES = ?rite "Wide number padded with zeros "+90;08d

@EXAMPLES = Wide number padded with zeros 00000090

@EXAMPLES = ?rite "Wide number padded with blanks "+90;8d

@EXAMPLES = Wide number padded with blanks       90

@EXAMPLES = ?rite "Wide number padded with blanks "+90;-8d+" left 
justified"

@EXAMPLES = Wide number padded with blanks 90       left justified

@LIST EDGE = Precision:

@LIST I NEAR = An optional precision specifier is a decimal integer 
preceded by a period (.) which specifies the maximum number of characters 
printed for all or part of an output field. It is identical to width 
for numeric output (D,I,U,O,X) but is used in strings to limit the 
length of strings which are output. This is useful when limiting the 
size of a string.

Examples:

@EXAMPLES = <P10M>?rite "Only 5 characters will be written '"+%db;.5s+"' 
..see" <P255D>

@EXAMPLES = <P10M>Only 5 characters will be written 'This ' ..see<P255D>

@EXAMPLES = <P10M>?rite "The parameter has no effect if the string 
is small, "+"see";.8s+" none" <P255D>

@EXAMPLES = <P10M>The parameter has no effect if the string is small, 
see none<P255D>

There is one more option which does not fit among these. An <169>R<170> 
can be put anywhere in the option string to cause a carriage return 
after the parameter has been printed. As many R's can be included 
as you want carriage returns.

Examples using R:

@EXAMPLES = ?rite "This will be on one line";rs+" This will be on 
another"

@EXAMPLES = This will be on one line

@EXAMPLES = This will be on another

@EXAMPLES = ?rite "Two returns here";rsr+90;0r8d+"the R's can be anywhere"

@EXAMPLES = 

@EXAMPLES = Two returns here

@EXAMPLES = 

@EXAMPLES = 00000090

@EXAMPLES = the R's can be anywhere

That completes the explanation of formatting options. They're a bit 
complicated but they are pretty flexible.

