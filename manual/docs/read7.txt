7.0 Alphabetical Command summary:

These names are used throughout the command descriptions for the sake of
brevity.

dest = label or line number
ptr  = any pointer type { strings or buffers }
num  = any scalar, other values are assumed
val  = Scalar or pointer
file = a filename (no wildcards)
spec = a filename (wildcards allowed)

Also, "[]" brackets are used to enclose optional parameters and "..." ellipses
are used to indicate that more similar options can follow.

Each command includes a description of the errors it can generate.  There are
several errors which can be generated by any command which takes a parameter.

  52  "&" not allowed on data type in "?????"
  53  Brackets not allowed in "?????"
  54  "^" on non-string "?????"
  55  Did not understand syntax (Press "?<Enter>" for help)
  56  Bad final character in "?????"
  57  Bad index in "?????", index must be a scalar
  65  Unknown Variable or Symbol and parameter not allowed together in "?????"
  66  Unknown Variable [?????]
  73  Number in "?????" must be between 0-9
 109  User Abort

Commands which do not accept parameters cannot generate these errors.  The DOS
shell commands (">", ".", "/") and comments "*" also cannot generate these
errors.  All other commands can generate them so they will not be included in
the individual lists of possible errors.

The branching commands (if,ifi,on,etc.) allow a command to be executed  in
place of a label.  If this is the case then the errors generated by the command
can occur as well as the errors possible from the branching command itself.

Here Goes:

     Command: ? or help
     Purpose: Provide help for user
Restrictions: D3-3780.HLP must be available
      Syntax: ?[,D3-3780 command or page number]
    Argument: If None, provides general help
              If a number, it provides later pages of general help
              If a command, it will be a specific help about the command

The "?" by itself supplies a general help on D3-3780.  More pages will
available by typing "?,#" where "#" is a digit (0-9).  Also, a specific help on
a particular command will be available by typing "?,command". This command
cannot return an error.


     Command: > or .
     Purpose: Load a DOS shell
Restrictions: Sufficient memory must be available.
      Syntax: >[DOS command]
    Argument: If None, loads DOS shell, you must enter "exit" to return
              If a DOS command, the DOS command is executed

The ">" and "." characters are a quick way to call up a DOS shell when running
interactive.  They are not useful for batch mode since they ask before
returning back into the D3-3780.  The "/" command below is used for that.  The
">" is mnuemonic for DOS but the "." is does not require the use of the shift
key.  Thus, either can be used.  Incidentally, redirection and piping on the
command line are supported, more on this later.  The errors for this command
are:

  50 Argument List too big
  96 Insufficient memory to process command

The 50 and 95 are the values which will be assigned to the "ei" variable. The
messages to the left will be displayed on the screen.


     Command: /
     Purpose: Load a DOS shell
Restrictions: Sufficient memory must be available.
      Syntax: /[DOS command]
    Argument: If None, loads DOS shell, you must enter "exit" to return
              If a DOS command, the DOS command is executed

Same as ">" and "." above except it returns immediately without asking. This is
useful in batch mode or as a remote command.  Also if the command does not
produce results that you want to view before returning.  Errors  are the same
as ">" and "." above.


     Command: *
     Purpose: Comment
Restrictions: None
      Syntax: *[Any thing you want out here up to 200 characters]
    Argument: Nothing or a string containing anything

Just a comment.  If the screen output is suppressed then the comments will not
be seen either.  See the "rite" command for displaying information for  batch
file spectators.  No errors generated for this command.


     Command: aa
     Purpose: Set the modem to answer the phone.
Restrictions: The modem cannot be online already
      Syntax: aa[,+timeout] or [,hh:mm]
    Argument: If None, waits forever
              If a "+" with timeout number, waits for timeout 10 seconds
              if a 24 hour timeout time, waits until that time

This sets the modem to answer the phone.  The command can, optionally, be made
to timeout at a certain time (24 hour time) or after a certain number of 10
second intervals.  The error indicator will be set appropriately if the timeout
occurs.

Errors:
   7  This command cannot be performed while online
  29  Timeout expired
  91  The time designation should contain a colon


     Command: alloc
     Purpose: Allocates memory and assigns a pointer to point to it
Restrictions: None
      Syntax: alloc ptr,num
 Arguments 1: Pointer which will be point to the memory
           2: The number of bytes to allocate

This command is used to allocate a memory buffer.  The first value is any
pointer variable and the second value is the number of bytes to allocate. This
is useful to make buffers in which to load parts of files and/or to make
buffers in which received data will be stored.  If ptr is not NULL (equal to
"nu") then the memory pointed to by it will automatically be  freed.  See
section 5.7 for more information on the use of pointers.

Errors:
  84  Parameter [?????] should be a pointer variable
  86  This command requires 2 parameter(s)
  87  Parameter [?????] should be a scalar
  93  Insufficient internal memory to process command


     Command: allst
     Purpose: Allocates memory for a string and a assigns pointer to it
Restrictions: None
      Syntax: allst ptr,ptr
 Arguments 1: Pointer which will point to the string
           2: String or pointer to be copied into allocated memory

This command is used to allocate memory for a string and copy the string  into
the allocated memory.  The "cpy" command is similar except the pointer 
variable must already be pointing to some allocated memory.  If ptr is not 
NULL (equal to "nu") then the memory pointed to by it will automatically be 
freed.  See section 5.7 for more information on the use of pointers.

Errors:
  84  Parameter [?????] should be a pointer variable
  85  Parameter [?????] should be a string constant or pointer
  86  This command requires 2 parameter(s)
  93  Insufficient internal memory to process command


     Command: app
     Purpose: Appends data pointed to by ptr for file named by file
Restrictions: None
      Syntax: app ptr,file[,val]
 Arguments 1: A pointer to a buffer (to write)
           2: filename to write out to
           3: If None, copies until a 0 is found or end of destination buffer
              if a scalar then the value is the number of bytes to write
              if a pointer then the value will be the upper bound

The "app"end command is a quick and dirty "add data to a file" command.  It is
especially useful if you want to log information to file.  This command  saves
you the trouble of having to open the file, write to it and then close  it. 
The third optional parameter is either a length (scalar) or a pointer to  the
first location past the end of the buffer.  If neither is specified then  the
command will write until the end of the buffer or until a  hex 0 is found  in
the buffer (whichever comes first).  The pointer technique is useful if you 
set up the series of p? variables to point into an allocated buffer for 
different purposes.  For example:

app %p3,dummy.txt,%p4

If p4 were the next designated data area this would cause the entire p3 data 
area to be written out but none of p4.

The "!" operator is useful here to write the contents of a binary buffer to a 
file.  For example:

alloc %p3,100
load %p3,binfile.exe
app %p3,dummy.bin,!p3

This would write 100 bytes to the end of file dummy.bin regardless of the 
contents of %p3.  Also, the source pointer need not have been the pointer  used
with the "alloc" or other memory allocation command.  When pointers  are
assigned values then the implied lengths are to the end of the data  area to
which they point.  For example:

alloc %p0,1000
mov %p1,&p0[900]
load %p1,binfile.exe
app %p1,dummy.bin,!p1

This has the same effect as the prior example since the implied length of the
p1 variable is 100.

The "ptr" parameter can also be an integer.  If "ptr" is an integer then its 
ASCII equivalent value will be written to the file.  That is, the if the 
integer is a 99 the string "99" will be written to the file.  The "val" 
parameter is irrelevant if "ptr" is not a scalar type.  

Errors:
   2  Unable to open file [?????]
  69  Length pointer [%s] must point into the memory buffer
  74  At least 2 parameter(s) required for this command
  80  Parameter [??????] must be a filename
  82  Length Parameter [?????] cannot be a file or label
  98  The filename cannot include wildcards


     Command: astat
     Purpose: Displays the size and time and data of all open files.
Restrictions: None
      Syntax: astat     

This command gives a list containing the file size, and time and date of last
modification of all the currently open files.  This command does not return any
errors.


     Command: bdn
     Purpose: Sets up buffer for data coming to the punch.
Restrictions: None
      Syntax: bdn buf[,val][;op]     
Argument buf: Pointer to the buffer in which to put data
         val: if None, length of buf is used
              if a scalar then the value is the number of bytes to write 
              if a pointer then the value will be the upper bound
          op: A "L" to get the last of the receive or blank for the first

This command allows you to set up a buffer which will receive data from the
punch.  The regular destination (set with dn) will still receive the data but
an extra copy is put in this buffer.  The optional "val" specifier indicates
the length of the buffer.  It can be blank, a number or a pointer.  Section 6.4
describes how the length parameter is interpreted.

The op parameter is either a "L" or nothing.  The "L" stands for last.  If  the
size of the reception is larger than the buffer then, by default, the  buffer
will take the first values from the reception and stop saving them  after that.
 If the "L" option is selected then new data will wrap around  and overwrite
the old data.  In this way the newest data will be in the  buffer.  After the
reception the buffer will automatically be unwrapped so  that the last data in
the file occurs in chronological order from beginning  to end in the buffer.

Errors:
  69  Length pointer [%s] must point into the memory buffer
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  94  Label not allowed in parameter [?????]
 100  Optional parameter must be 'L' or nonexistent


     Command: bdp
     Purpose: Sets up buffer for data coming to the printer.
Restrictions: None
      Syntax: bdp buf[,val][;op]     
Argument buf: Pointer to the buffer in which to put data
         val: if None, length of buf is used
              if a scalar then the value is the number of bytes to write 
              if a pointer then the value will be the upper bound
          op: A "L" to get the last of the receive or blank for the first

Same as bdn except for the printer rather than punch.


     Command: buf
     Purpose: Sets up buffer for incoming data.
Restrictions: None
      Syntax: buf buf[,val][;op]     
Argument buf: Pointer to the buffer in which to put data
         val: if None, length of buf is used
              if a scalar then the value is the number of bytes to write 
              if a pointer then the value will be the upper bound
          op: A "L" to get the last of the receive or blank for the first

This option is similar to the bdn and bdp options except that it buffers both
of them.  It can be used at same time as the bdn and bdp commands.  Thus, it is
possible to have data copied into two different buffers (plus its destination)
during the same reception.  It may be useful to use both at the same time to
catch both the first and last parts of a reception (by  specifying the "L"
option for one buffer).  The errors are the same as in  bdn command.


     Command: c
     Purpose: Takes modem off hook in private line mode.
Restrictions: Must have access to MODEMS.DTA file, the modem cannot be online
      Syntax: c

This option allows the modem to communicate in private line mode.

Errors:
   7  This command cannot be performed while online
  11  The modem was unable to train


     Command: call
     Purpose: Calls another command file or a subroutine in the current file
Restrictions: Batch mode only
      Syntax: call dest or file
    Argument: if a file, that file will become the new command file.
              if a label, that label will be branched to
              if a scalar, the line number will be branched to

This is a command allows you to make a super-command either in the same file or
in other files.  If the call is to another file then the processing will return
to the line following the call once the batch file has been executed. If the
call is within the same file then the processing will return to the line
following the call when a "ret" return instruction is processed.

Errors:
  58  Label [?????] not found
  59  Line number ??,[??] exceeds command file length
  67  This command is only allowed in batch mode
  68  Command file read error
  79  The destination parameter [?????] must be label or line number
  93  Insufficient internal memory to process command
  97  Could not return to file \"???????\".


     Command: cat
     Purpose: Concatenates two strings.
Restrictions: None
      Syntax: cat destptr,sourceptr[,val]
  Argument 1: Destination string
           2: Source string
		 3: If none, length of destptr
              if a scalar then the value is the maximum length for destptr
              if a pointer then the value will be the upper bound

Copies the string pointed to by sourceptr onto the end of the string pointed 
to by destptr.  Section 6.4 describes the possible values for length 
parameters.

Errors:
  69  Length pointer [?????] must point into the memory buffer
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  85  Parameter [?????] should be a string constant or pointer
  86  This command requires 2 parameter(s)


     Command: clall
     Purpose: Closes all open files
Restrictions: None
      Syntax: clall

Closes the file for every handle.  No errors are possible.


     Command: close
     Purpose: Closes a file
Restrictions: None
      Syntax: close handle
    Argument: The handle of the file to close

This command closes the file specified by handle.

Errors:
  20  The file specified by handle [?????] is not open
  86  This command requires 1 parameter(s)


     Command: clrca
     Purpose: Clears the unreturned calls
Restrictions: None
      Syntax: clrca

This command clears all unreturned calls.  It is useful when an error occurs in
a subroutine and you want to branch to a general purpose error handler. There
are no possible errors returned for this command.


     Command: cls
     Purpose: Clears the command window
Restrictions: None
      Syntax: cls

This command clears the command window and puts the prompt at the top line. No
errors are possible with this command.


     Command: comp 
     Purpose: Compresses a file using runlength compression 
Restrictions: None
      Syntax: comp sourcefile,destfile
  Argument 1: File to compress
           2: Name to use for resulting file
		 

     Command: cpy
     Purpose: Copies a buffer or string to another location.
Restrictions: None
      Syntax: cpy destptr,sourceptr[,val]
  Argument 1: Destination pointer
           2: Source pointer
           3: If None, copies until a 0 is found or end of destination buffer
              if a scalar then the value is the number of bytes to write 
              if a pointer then the value will be the upper bound

The area pointed to by destptr will receive the data pointed to by sourceptr.  
The optional "val" parameter is the maximum length as covered in section 6.4.  
If no "val" is specified then the copy will go on until a hex 0 is encountered 
or until the end of the destination buffer whichever comes first.  The no 
"val" technique is used to copy strings.  The example length parameters in the
description of the "app" command are the same as for this command.

Note: The buffer must have memory allocated to it already.  Use the "allst"
      command if you need to allocate memory for the string as well as copy 
      it.

Errors:
  69  Length pointer [%s] must point into the memory buffer
  74  At least 2 parameter(s) required for this command
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  85  Parameter [?????] should be a string constant or pointer


     Command: da
     Purpose: Puts the modem in Data mode.
Restrictions: None
      Syntax: da

This has no effect now since the "tk" command is not implemented yet.  When 
the tk command is implemented then this command will put the modem back in 
control of the line.  This command will not currently generate any errors.


     Command: dec
     Purpose: Decrements either a scalar or a pointer variable.
Restrictions: None
      Syntax: dec val
    Argument: Scalar or pointer to decrement (cannot be db)

This command will reduce the value of a scalar (i0-i9,bl,db[5],etc.) by one. It
will also decrement the value of pointer variable.  This will cause the pointer
to point one character earlier in the buffer.

Error:
  83  Parameter [?????] should be a pointer or scalar variable


     Command: del (also er)
     Purpose: Deletes one or more files
Restrictions: None
      Syntax: del spec
    Argument: File specification which can include a path and/or wildcards

This command will delete any files indicated by the file specification.  A path
can be included and it will not generate a "Are you sure" message if "*.*" is
used.  Thus, "del *.*" can be used in batch mode without user intervention. 
This is identical to the "er" command.

Errors:
   5  Unable to delete file [?????]
  86  This command requires 1 parameter(s)
  89  Parameter [?????] should be a filename or file specification


     Command: dir (also ld)
     Purpose: Does a wide format directory
Restrictions: None
      Syntax: dir spec
    Argument: File specification which can include a path and/or wildcards

This is just like the DOS dir /w command.  Any valid DOS path and wildcards can
be used.

Errors:
  89  Parameter [?????] should be a filename or file specification


     Command: dl
     Purpose: Dials a number that is in a string or file.
Restrictions: The modem cannot be online
      Syntax: dl string or file
    Argument: If a string, then the number in the string is dialed
              If a file then a number is read from the file and is dialed

This dials a number out of a file or in a string.
   2  Unable to open file [?????]
   4  Received busy signal
   7  This command cannot be performed while online
  11  The modem was unable to train
  19  No tone detected
  61  Error in phone number
  86  This command requires 1 parameter(s)
  98  The filename cannot include wildcards
 104  Parameter [?????] must be a string of filename



     Command: dn
     Purpose: Defines the file and options to be used for the punch.
Restrictions: None
      Syntax: dn,file[,ops]
  Argument 1: The filename to which punch data will be written
           2: If none, default naming and buffer types
              If a string, the characters will set the options

The define punch specifies the filename to which punch data will be written.
There are several special filenames:

CON          : This writes data to the screen.  Works!
NUL          : This throws away all the incoming data.
PRN          : This writes data to the default printer (parallel port).  This 
               option is not fully supported yet.  It will be in the final 
               revision however (the current revision will accept the 
               parameter but will fail if large files are to be received).
LPT1 and LPT2: This is the similar to PRN except that the specific parallel 
               port is identified.
AUX          : This refers to the first serial port (same as COM1).  It is 
               used to send data to a serial printer.  It not supported in
               this revision.
COM1 and COM2: These are supposed to send data out the serial ports but they 
               are also not supported yet.

The options that go with the the dn command are used to set the types of buffer
conversions and to enable or disable auto-naming.  The four types of buffer
conversions are the same ones as described in section 2.2.  The auto-naming
option determines if multiple files are received between "dn" definitions
whether they will be concatenated or whether new files will be created by
creating or incrementing a numeric extension.  The options  consist of a series
of characters, each of which has special meaning.  There are two forms of
options for this command the (shorter) normal ones and the more extensive form
which can set the options in more possible ways.  The normal options are:

  S - To set the standard mode to the "Vary" buffer type.
  T - To set the transparent mode to the "Fixed" buffer type.
  B - To set the transparent mode to the "Binary" buffer type.
  C - To turn auto-naming off (Concatenate).
  N - To turn auto-naming on.

Less common short options:
  H - To set both standard and transparent to the "Hex" buffer type.
  V - To set both standard and transparent to the "Vary" buffer type.
  F - To set both standard and transparent to the "Fixed" buffer type.

Examples:

dn file.txt,s      ; Specifies standard with vary buffer type expected.
dn file.txt,tc     ; Specifies transparent with fixed buffer type expected
                     and disables auto-naming.
dn file.txt,nb     ; Specifies transparent with binary buffer type expected
                     and disables auto-naming.

Note: The order of the options is not important when using the short form.

The long form uses the "S" and "T" followed by either "V", "F", "B" or "H" to
indicate the buffer type and the mode in which it is used precisely.

For example:

dn file.txt,sftb   ; Specifies that fixed format be assumed for standard 
                     receptions and that binary format be assumed for
                     transparent receptions.

dn file.txt,nshtf  ; Specifies auto-naming and that the hex buffer type be 
                     used for standard receptions and that the fixed format
                     be used for transparent receptions.

In general the "V", "F", "B" and "H" options will refer to the reception type
of the nearest "S" or "T" to its left (usually the preceding character).  The
"N" and "C" options can be placed anywhere without having any affect.

Errors:
  80  Parameter [?????] must be a filename
  94  Label not allowed in parameter [?????]
  98  The filename cannot include wildcards
 101  The option [????] is not valid


     Command: dp
     Purpose: Defines the file and options to be used for the printer.
Restrictions: None
      Syntax: dp,file[,ops]
  Argument 1: The filename to which printer data will be written
           2: If none, default naming and buffer types
              If a string, the characters will set the options

Same as punch (above) except for printer.


     Command: ds
     Purpose: Disconnects the line in an orderly fashion.
Restrictions: The modem must be online
      Syntax: ds

This command sends a message to the remote 3780 that it is going to disconnect
and then drops the line.  The disconnect is automatically performed if you exit
with the "Q" command.  If you cannot send the disconnect message to the remote
then the line can be dropped with the "fq" command.

Errors:
   6  This command cannot be performed unless online
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error


     Command: dsup
     Purpose: Suppresses direct video output
Restrictions: None
      Syntax: dsup

Suppresses all direct video writes.  This includes:
  1. All status variables
  2. The screen (after a redsp)
  3. DRITE writes?
  4. 
  

     Command: dt
     Purpose: Dumps the contents of a trace buffer to the disk.
Restrictions: Not supported yet
      Syntax: dt,file
    Argument: File to dump trace to

This command is used in conjunction with the tr command to capture and write a
hex dump of the line activity to the disk.  It is not supported yet but will be
soon.  No errors are generated yet.


     Command: end
     Purpose: Terminate processing of the current command (batch) file.
Restrictions: None
      Syntax: end

This command is used to prematurely return from a command file.  It differs
from the "ex" command in that control will return to the calling batch file and
D3-3780 will continue.  "ex" will terminate D3-3780.  This command is identical
to D3-3780 reaching the end of a command file.  No errors are possible with
this command.


     Command: enz
     Purpose: Conditionally, exiting the package without dropping the line.
Restrictions: None
      Syntax: enz

If there was an error on the prior command then this will exit D3-3780 with the
DOS errorlevel set to the same value as the D3-3780 error.  If online, the line
will remain active.  No possible errors with this command.


     Command: er (or del)
     Purpose: Deletes one or more files
Restrictions: None
      Syntax: er spec
    Argument: File specification which can include a path and/or wildcards

Identical to the "del" command above.


     Command: ex
     Purpose: Exit to DOS without dropping line.  Optionally, set errorlevel.
Restrictions: None
      Syntax: ex[,errorlevel]
    Argument: If none, errorlevel is 0
              If a scalar, the errorlevel is its value

This command will exit D3-3780 without breaking the connection with the other
3780.  If a value is specified the DOS errorlevel will be set to that value. 
Otherwise, the errorlevel will be 0.

Errors:
  70  The value [?????] of parameter 1 is too big, maximum allowed is 255
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  87  Parameter [?????] should be a scalar


     Command: free
     Purpose: Give back memory that is no longer needed.
Restrictions: None
      Syntax: free ptr
    Argument: A pointer to memory that was allocated with ALLST or ALLOC.



     Command: fq
     Purpose: Drop the line and go to DOS without hesitation.
Restrictions: None
      Syntax: fq

This command will leave drop the line without informing the other 3780 that it
is about to do so and will then exit to DOS.  No errors are possible.


     Command: frite
     Purpose: Format and write data to an open file.
Restrictions: None
      Syntax: frite han,val[;ops][+val[;ops]]...
Argument han: The handle of the file to write to
         val: If a scalar, the value is written out
              If a string, the string is written out
         ops: If none, default display format
              If string, characters determine format

The frite command allows the batch programmer to write strings and variable
values out to the disk.  The first option is the file handle and the parameters
following parameters are the same as those for the "rite" command as described
in section 6.9 above.

Errors:
  20  The file specified by handle [?????] is not open
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  87  Parameter [?????] should be a scalar
  90  Parameter [?????] should be a pointer or scalar
  94  Label not allowed in parameter [?????]


     Command: fstat
     Purpose: Displays information on an open file
Restrictions: None
      Syntax: fstat handle
    Argument: The handle of the file to use

This option is useful to display size, time and date information on a file
and to check if a handle is in use.  If you call fstat on a handle that
does not have a file associated with it then it will generate an error.
The "if" command can then be used to branch based on that error.

Example:
  ?open 0,d3-3780.exe
  File "D3-3780.EXE" opened in "R" mode.
  ?fstat 0
  Size is 75804 bytes, Time stamp is Tue May 23 13:14:02 1989

Errors:
  20  The file specified by handle [?????] is not open
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  86  This command requires 1 parameter(s)
  87  Parameter [?????] should be a scalar


     Command: gbuf
     Purpose: Get data from file and put it into a buffer.
Restrictions: None
      Syntax: gbuf handle,buf[,val]
  Argument 1: The handle of the file to use
           2: A pointer to the location where the data will be copied
           3: if None, reads until end of destination buffer
              if a scalar then the value is the number of bytes to read
              if a pointer then the value will be the upper bound

The gbuf command is used to read data from a file.  The "buf" value is the
location of the buffer in which to read the data.  The optional "val" is the
length parameter as described in section 6.4.  This command does not look for a
hex 0 in the source string to stop copying.  It will read until the end of the
source file or fill the entire destination buffer if the [,val] parameter is
not included.

The "buf" parameter can also be an integer or in individual character in a
buffer.  If "buf" is an integer or character then a value will be read from 
the file and assigned to the scalar.  The "val" parameter is irrelevant in 
this case since one character is read for character types and two for 
integers.

Errors:
  20  The file specified by handle [?????] is not open
  21  At end of file [?????], can't read anymore
  69  Length pointer [%s] must point into the memory buffer
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  76  The parameter [?????] cannot be assigned to
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  87  Parameter [?????] should be a scalar
  90  Parameter [?????] should be a pointer or scalar


     Command: getxt
     Purpose: Saves a portion of the screen in a dynamically allocated buffer
Restrictions: None
      Syntax: getxt ptr,roupper,colupper,rolower,collower
  Argument 1: A pointer which will point to the stored screen
           2: The highest row to be stored
           3: The leftmost column to be stored
           4: The lowest row to be stored
           5: The rightmost column to be stored

The rows and columns are numbered starting at 1,1 in the upper left corner.
This command will dynamically allocate the memory to store the prior screen.
The amount of memory required to store the screen will vary depending since
data compression is used on it.  The length averages about 1000 bytes.  The
'!' sign can be used to determine the amount of data actually used.


     Command: go
     Purpose: Resume execution somewhere else in the command file
Restrictions: Batch only
      Syntax: go dest
    Argument: The label or line number to branch to

This is a simple branching instruction.  It will take either a label
or a line number.  It also will take the letter "Q" to exit.  This is
not very useful in this instruction since a "Q" by itself would have the
same effect.

Errors:
  58  Label [?????] not found
  59  Line number ??,[??] exceeds command file length
  67  This command is only allowed in batch mode
  68  Command file read error
  78  The destination parameter [?????] cannot be a filename


     Command: help[,command]
     Purpose: Same as "?"
Restrictions: None



     Command: if
     Purpose: Conditionally, resume execution somewhere else
Restrictions: Batch only
      Syntax: if errdest,noterrdest
  Argument 1: If none, drop through on error
              If label or line number, branch on error
           2: If none, drop through on no error
              If label or line number, branch on no error

This can be read as if (error) then go to dest else go to noterrdest.  The first
branch will be executed if the prior instruction resulted in an error.  If
the second branch exists a non-error will cause it to be traversed.  If the
second branch does not exist then the next line in the command file will be
executed.  In all the branching instructions, a blank branch indicates go
to the next line for execution.  This instruction is the only instruction 
which is affected by the "il" command.  The "il" command is used to limit 
the number of times a negative branch is executed.  A complete explanation 
will be given with that command.

Note: The prior instruction is meant literally here.  An intervening comment
      will reset the error value.  If you want to have intervening commands
      then save the ei value in an i0-i9 variable and branch off it later.

Same errors as "go" command above plus:
  13  Loopcount expired


     Command: ife
     Purpose: Check for existence of file
Restrictions: Batch only
      Syntax: ife spec,existdest,notexistdest
  Argument 1: Filename which can contain a path and wildcards
           2: If none, drop through if file exists
              If label or line number, branch if file exists
           3: If none, drop through if file doesn't exist
              If label or line number, branch if file doesn't exist

This would read "if spec exists then go to dest else go to dest2.  The spec
can contain wildcards and a pathname.

Same errors as "go" command above plus:
  74  At least 1 parameter(s) required for this command
  89  Parameter [?????] should be a filename or file specification


     Command: ifef
     Purpose: Check for end of file condition
Restrictions: Batch only
      Syntax: ifef handle,eofdest,noteofdest
  Argument 1: The handle of the file to check for end of file
           2: If none, drop through if end of file
              If label or line number, branch if end of file
           3: If none, drop through if not end of file
              If label or line number, branch if not end of file

This would read "if at the end of file handle then go to dest else go to 
dest2".  When file input/output is performed on files using handles then
a file pointer is maintained by the system.  This file pointer tells the
system where to read from or write to.  The "end of file" condition is 
when that file pointer is at the end of the file.  Thus, when reading a 
file the "end of file" condition means that there is no more file to be 
read.  If the file has not been opened then eofdest will be branched to.

Same errors as "go" command above plus:
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  87  Parameter [?????] should be a scalar


     Command: ifi
     Purpose: Check for two strings or scalars being identical
Restrictions: Batch only
      Syntax: ifi lval=rval,equdest,diffdest
Argument 1&2: The values to be compared
           3: If none, drop through if identical
              If label or line number, branch if identical
           4: If none, drop through if not identical
              If label or line number, branch if not identical

This would read "if lval is identical to rval then go to equdest else go to 
diffdest".  If lval and rval are pointers then a string compare is performed.
If lval and rval are scalars then the values are compared.

Same errors as "go" command above plus:
  74  At least 3 parameter(s) required for this command
  95  Pointer and scalar operands cannot both be present in this command


     Command: ifo
     Purpose: Check if online
Restrictions: Batch only
      Syntax: ifo onlinedest,offlinedest
  Argument 1: If none, drop if online
              If label or line number, branch if online
           2: If none, drop through if offline
              If label or line number, branch if offline

A simple check to determine if the modem is online.  This is useful after
"W" commands to determine if the line has been dropped.  It may also come
in to check after an auto-answer if the line stayed up.  Same errors as 
"go" command above.


     Command: ifp
     Purpose: Check the type of the last reception
Restrictions: Batch only
      Syntax: ifp errdest,prindest,punchdest
  Argument 1: If none, drop through if error
              If label or line number, branch if error
           2: If none, drop through if last receive was to printer
              If label or line number, branch if last receive was to printer
           3: If none, drop through if last receive was to punch
              If label or line number, branch if last receive was to punch

This would read "If an error during reception go to errdest else if last
reception was to the printer go to prindest else go to punchdest".  The
error branch is only in reference to the command immediately preceding the
"ifp" command but the other two branches will go back to the last "W" 
command that was executed.  The "rt" variable can be useful for similar for
similar branching operations.  Same errors as "go" command.


     Command: ifs
     Purpose: Compare two strings up until the end of the leftmost string
Restrictions: Batch only
      Syntax: ifs lstr=rstr,equadest,diffdest
Argument 1&2: The strings to be compared, comparison is to end of left string
           3: If none, drop through if a match
              If label or line number, branch if a match
           4: If none, drop through if not a match
              If label or line number, branch if not a match

This command is useful for checking the start of a string for a match.  If
a long string is stored in a buffer then the value on the left can be a
short version which is large enough to distinguish it from the other 
possibilities.  This compare is case insensitive.

Same errors as "go" command above plus:
  74  At least 3 parameter(s) required for this command
  85  Parameter [?????] should be a string constant or pointer
  95  Pointer and scalar operands cannot both be present in this command


     Command: ift
     Purpose: Compare time stamps of files
Restrictions: Batch only
      Syntax: ift rfile=lfile,equadest,rfilenewerdest,lfilemewerdest
Argument 1&2: The files to be compared
           3: If none, drop through if a match
              If label or line number, branch if a match
           4: If none, drop through if rfile is newer than lfile
              If label or line number, branch if rfile is newer than lfile
           5: If none, drop through if lfile is older than rfile
              If label or line number, branch if lfile is older than rfile

This command is for comparing the timestamps of files.  If one (or both) of 
the files does not exist then it will drop through.

Same errors as "go" command above plus:
   2  Unable to open file [?????]
  74  At least 3 parameter(s) required for this command
  80  Parameter [??????] must be a filename
  98  The filename cannot include wildcards


     Command: il
     Purpose: Set a negative branch limit for the "if" command
Restrictions: None
      Syntax: il loopcount
    Argument: The maximum number of times to execute the negative branch
              of an "if" command

This command was mainly offered to reduce the pain that users converting
from BSC will experience.  The "if" command is the only one which checks
this value.  If you set a value with "il" then its value will be decremented
each time the negative branch of an "if" is executed.  On the count which
reaches 0 the "if" will drop through rather than branch.

Errors:
  87  Parameter [?????] should be a scalar


     Command: inc
     Purpose: Increment a scalar or pointer
Restrictions: None
      Syntax: inc val
    Argument: The scalar or pointer to be incremented

This command simply increments a scalar or pointer.  Incrementing a pointer
will simply make it point to the next (to the right) character in the
buffer.

Error:
  83  Parameter [?????] should be a pointer or scalar variable


     Command: intrp
     Purpose: Interpret a string as if it were a command
Restrictions: None
      Syntax: intrp str
    Argument: The string to be interpreted.

This command takes the value in a string and processes it as the command.
This can be used in a subroutine to get the effect of passing a pointer to
a command.  The calling function can load a command into a predefined
buffer and the subroutine can used "intrp" to execute the command.

Another use of this functions is to interpret commands that are created in
a buffer.  This be can useful for the two DOS shell commands.  The DOS shell
commands take there arguments literally (%i0, %p0, etc. are not converted
to there equivalent values).  If you want to use internal variables on the
command line of one of these commands you can create a command with the
"srite" command and then process it with intrp.

Example:

  srite %db,"/copy file.jnk file2."+%i0;03d
  intrp %db

This would copy the file "file.jnk" to a file with "file2" primary and the
number in %i0 for the extension.

Errors:
  85  Parameter [?????] should be a string constant or pointer
  + The errors that the command can generate


     Command: key
     Purpose: Display a string and then get a key from user
Restrictions: None
      Syntax: key num[;op],val[;ops][+val[;ops]]...
Argument num: An integer or character variable which will be assigned a key
          op: if op is a c num is assigned a character else an integer
         val: If a scalar, the value is written out
              If a string, the string is written out
         ops: If none, default display format
              If string, characters determine format

This command is used to construct interactive command files.  The "num"
argument receives the result of a stroke from the keyboard.  A keystroke
result consists of 2 things; the character the key generated and the scan
code of the key.  If the num is an integer (i0-i9) then the high byte will
be the scan code and the low byte will be the character.  The scan code is
required to check for special keys (function keys, arrow keys, etc.).  The
high byte being non-zero will cause comparisons to character constants ('A',
'B','C',etc.) to fail.  Set the value of "op" to "c" if you are not trying
to decode special keys.  The other parameters are just like those to the
rite command.  They will display on the screen prior to the retrieving of
a key.

Note: An appendix will list the scan code of all the keys on the keyboard.

Errors:
  88  The parameter [?????] cannot be assigned a scalar
  90  Parameter [?????] should be a pointer or scalar
  94  Label not allowed in parameter [?????]
 100  Optional parameter must be 'C' or nonexistent


     Command: kl
     Purpose: Stop current activity
Restrictions: None
      Syntax: kl

The "kl" command is used to terminate a send, receive or auto-answer before
it is complete.

Error:
   8  No process in progress to kill


     Command: ld (also dir)
     Purpose: Does a wide format directory
Restrictions: None
      Syntax: ld spec
    Argument: File specification which can include a path and/or wildcards

Same as "dir" above.


     Command: lf
     Purpose: Causes record of screen I/O to be echoed to disk
Restrictions: Batch only
      Syntax: lf file
    Argument: File name or NUL to disable listing file

The list file command causes the commands and other values which are 
displayed in the command window to be written to disk also.  This does not
stop the information from displaying on the screen also (use "sup" for that).
If the file already exists the "lf" command will cause the additional data
to be appended to it.

Errors:
   2  Unable to open file [?????]
  80  Parameter [??????] must be a filename
  98  The filename cannot include wildcards


     Command: load
     Purpose: loads buffer pointed to by ptr from file named by file
Restrictions: None
      Syntax: load ptr,file[,val]
 Arguments 1: A pointer to a buffer (to read)
           2: filename to read from
           3: if None, the length of the ptr 
              if a scalar then the value is the number of bytes to write 
              if a pointer then the value will be the upper bound

This is a quick and dirty load buffer command.  It saves the hassle of having
to opening and closing a file in order to read it.  The length determination is
similar to the other commands as discussed in section 6.4.

The "ptr" parameter can also be an integer.  If "ptr" is an integer then 
ASCII equivalent value will be read from the file and assigned it.  That is,
the if the file contains the string "99" the value 99 will be assigned the
integer.  

The "ptr" parameter can also be an individual character.  If this is the 
case then the first character in the file is read into it.

The "val" parameter is irrelevant if "ptr" is not a scalar type.

Errors:
   2  Unable to open file [?????]
  69  Length pointer [%s] must point into the memory buffer
  76  The parameter [?????] cannot be assigned to
  77  Buffer pointer [?????] must have memory allocated to it
  80  Parameter [??????] must be a filename
  82  Length Parameter [?????] cannot be a file or label
  90  Parameter [?????] should be a pointer or scalar
  98  The filename cannot include wildcards


     Command: lscrn
     Purpose: Loads direct memory screen from disk
Restrictions: None
      Syntax: lscrn file
    Argument: File which contains a direct write screen


     Command: lsvts
     Purpose: To load the status variable format strings
Restrictions: None
      Syntax: lwr val
    Argument: If a filename then the file contains the format strings
              If a label then the label is the location in the file of
                the format strings.


     Command: lwr
     Purpose: Makes a string of scalar lowercase
Restrictions: None
      Syntax: lwr val
    Argument: If a string the whole string will be made lowercase
              If an integer or character just the character will be made 
                lowercase

This command is just like is sounds.  Characters that are non-alphabetic or
already are lower case are not affected.

Error:
  76  The parameter [?????] cannot be assigned to


     Command: m
     Purpose: Allows the performing of a manual connect
Restrictions: The modem cannot be online
      Syntax: m

This command is used when you want to manually connect with the remote modem
and then switch the local modem online.  It is mainly useful for diagnostic
purposes when having trouble auto-dialing.  Manually connecting is a three part
process:

  1. Enter the "m" command
  2. Dial the required number and listen for answer back tone
  3. Before the tone has stopped press the "Enter" key

Errors:
   7  This command cannot be performed while online
  11  The modem was unable to train


     Command: mo
     Purpose: Gets and displays the modem's options
Restrictions: The modem cannot be online
      Syntax: mo

This command is also primarily diagnostic.  It performs a query of the modem
asking it to return the values of the options.  Since these options are in hex
they are not very useful.  If the modems data file is available this command
will be made to display the names for the values.  I have not implemented this
feature yet

Errors:
   7  This command cannot be performed while online
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  75  Error interfacing modem [?????]


     Command: mome
     Purpose: Sends and optionally receives a message from the modem
Restrictions: The modem cannot be online
      Syntax: mome str[;op]
  Argument 1: The string is a hex string for the modem to accept
           2: if op=N then no response is expected from the modem
              if none then a response is looked for

This command is another diagnostic command.  It allows the properly informed
user to run modem self test and do several other checks.  More commands will be
added later which use modem dependent information in the MODEMS.DTA.

Errors:
   7  This command cannot be performed while online
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  75  Error interfacing modem [?????]
  85  Parameter [?????] should be a string constant or pointer
  94  Label not allowed in parameter [?????]
 100  Optional parameter must be 'N' or nonexistent


     Command: mov
     Purpose: Assigns a scalar or pointer a value
Restrictions: None
      Syntax: mov destval,sourceval
  Argument 1: The scalar or pointer to receive a new value
           2: The scalar or pointer value to be assigned

This is a simple assignment command.  It can be used to assign array values,
integers or pointers new values.

Errors:
  83  Parameter [?????] should be a pointer or scalar variable
  86  This command requires 2 parameter(s)
  90  Parameter [?????] should be a pointer or scalar
  95  Pointer and scalar operands cannot both be present in this command


     Command: mseth
     Purpose: Assigns values for base address and interrupt level of modem
Restrictions: None
      Syntax: mseth base,intrupt
  Argument 1: The base address of the modem (default is 300 hex)
           2: The intrupt value of the modem (default is 3)



     Command: mv
     Purpose: Used to display the modem version
Restrictions: The modem cannot be online
      Syntax: mv 

This command will perform a version request from the modem and display the
four hex bytes which are returned.  If the MODEMS.DTA file is available then
it will also display the name of the modem.  This command is primarily for
checking modem "ROM" revisions when problems occur.

Errors:
   7  This command cannot be performed while online
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  75  Error interfacing modem [?????]


     Command: on
     Purpose: Multy way conditional branch statement
Restrictions: Batch mode only
      Syntax: on num,lownum[;highnum][=dest],lownum[;highnum][=dest],...
Argument num: The value whose value is being compared against
      lownum: The low number in the range check
     highnum: The high number in the range check 
              if blank then num must equal lownum to execute the branch
        dest: The label or line number to branch to

This statement conditionally causes execution to begin at one of a number of
locations.  The value "num" is compared to each of the respective 
lownum;highnum pairs to determine if it is between or equal to either.  If
it is then the corresponding branch "dest" is jumped to.  If highnum is
blank then an exact match with lownum is required.  If dest is blank and the
value is in range then the on will drop through.  If "num" doesn't match any
of the ranges then the on will drop through.
  This expression is scanned from left to right and the lownum;highnum sets
can overlap or include one another.  Generally the lower ranges would occur 
earlier and the higher later.  However, the scanning order can be used to 
your advantage.  If a large range is to be checked with a few exceptions, 
the exceptions can be eliminated by ranges which are checked earlier.

Example:

on %ei,0=:onlinedest,4=:busydest,19=:notonedest,1;<h7fff>=errdest

The above example is a simple check which will branch to "onlinedest" if
ei is 0, busydest if ei is 4, notonedest if ei is 19 and errdest otherwise.

The following example demonstrates how a few values can be excluded from
a check of a larger range.

on %i0,5,7,9,11,1;100=:errordest,101;<h7fff>=:baderrdest

If the value of %i0 is 0 or below, 5, 7, 9 or 11 it will drop through.
Note: None of the expressions match 0 or below.  5, 7, 9, 11 all have
      blank destination fields.
If %i0 is none of those but between (or equal to) 1 and 100 it will branch to
errordest.
If the value is above 100 then the batch will branch to baderrdest.  

Note: The highest possible value for an integer is <h7fff>.
Also: The values lownum and highnum need not be constants.  The can be any
      scalar type.

Errors:
  67  This command is only allowed in batch mode
  74  At least 2 parameter(s) required for this command
  78  The destination parameter [?????] cannot be a filename
  87  Parameter [?????] should be a scalar


     Command: open
     Purpose: open a file
Restrictions: None
      Syntax: open handle,file[;ops]
  Argument 1: The handle of the file to use
           2: The name of a file (can include path)
           3: An option string which determine how the file will be opened.

The open command is used to open a file so that the other handle based file
commands can be used.  The handle is merely a number 0-9.  The filename is
can include a path and/or drive designation.  The options consist of a
string (quotes are optional) which contains option characters.  I'll explain
each character individually:

 "R"  Open file for reading.  The file must exist or an error will be 
      generated.  Values cannot be written to this file unless the "P" 
      option (below) is also selected.

 "W"  Open file for writing.  If the file exists then its contents will
      be destroyed.  If the "P" option is not selected then this file
      cannot be read from.

 "A"  Open file for appending.  If the file exists then the data will be
      appended to it.  If it doesn't exist then it will be created.

 "P"  "P"lus.  Used in conjunction with "R" it allows the file to be
      written to also.  If used in conjunction with "W" allows the file
      to be read from also.  Allows both reading and writing when used
      with the "A" option but will still not allow the overwriting of
      original data (writes must be two the end of the file).

 "B"  "B"inary option.  This is used if the file does not contain text.
      Normally, a carriage return-line feed pair is converted to a line 
      feed when read in and vice versa when written out.  This process 
      is suppressed when the "B" option is used.

Note: Only one of the "R", "W" and "A" options should be included.  
      combinations of more than one are not supported (the last one in
      the string will be used).

A handle must be opened before any of the operations using handles will
work properly.  Use the "fstat" command and check for an error if there
is a question about whether the handle has been opened.

Errors:
   3  Unable to open file "?????" in "?????" mode
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  80  Parameter [?????] must be a filename
  87  Parameter [?????] should be a scalar
  94  Label not allowed in parameter [?????]
  98  The filename cannot include wildcards


     Command: opr
     Purpose: Performs a numeric operation and assigns the result
Restrictions: None
      Syntax: opr destval,sourcenum,opchar
  Argument 1: The scalar or pointer to receive the resulting value
           2: The second operand, always a scalar
           3: A character representing the operation to be performed

This command is used for performing numeric operations on integers,
characters and pointers.  Some of the operations are not valid with
pointers.  The left argument is assigned the value resulting from the
operation being performed on both the arguments.  

For example:

  mov %i0,20
  opr %i0,5,'-'

This would result in %i0 being 20-5 or 15.

Here is an explanation of each of the valid operations and the characters
used:

  '+' : Addition, Can use scalars or pointers.
  '-' : Subtraction, destval=destval-sourcenum, Can use scalars or pointers.
  '*' : Multiplication, Scalars only.
  '/' : Division, destval=destval/sourcenum, Scalars only.
  '|' : Bitwise "or" operation, Scalars only.
  '&' : Bitwise "and" operation, Scalars only.
  '^' : Bitwise "exclusive or" operation, Scalars only.
  '%' : Modulus (remainder after a division) operation, Scalars only.
  '>' : Bitwise shift right operation.  Sourcenum is the number of bits to 
          shift.  Scalars only.
  '<' : Bitwise shift left operation.  Sourcenum is the number of bits to 
          shift.  Scalars only.

Errors:
  62  Operator '?' not recognized
  63  Operator '?' not valid with pointers or not recognized
  83  Parameter [?????] should be a pointer or scalar variable
  86  This command requires 3 parameter(s)
  87  Parameter [?????] should be a scalar


     Command: p
     Purpose: To delay for a certain interval or until a certain time.
Restrictions: None
      Syntax: p[,+timeout] or [,hh:mm]
    Argument: If None, generates an error
              If a "+" with timeout number, waits for timeout/10 seconds
              if a 24 hour timeout time, waits until that time

This is just a delay command.  The command must be made to timeout at a 
certain time (24 hour time) or after a certain number of 1/10 second 
intervals.

Errors:
  29  Timeout expired
  70  The value [?????] of parameter 1 is too big, maximum allowed is 23
  70  The value [?????] of parameter 2 is too big, maximum allowed is 59
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  71  The value [?????] of parameter 2 is too small, minimum allowed is 0
  87  Parameter [?????] should be a scalar
  91  The time designation should contain a colon


     Command: pbuf
     Purpose: Put data from a buffer into a file
Restrictions: None
      Syntax: pbuf handle,buf[,val]
  Argument 1: The handle of the file to use
           2: A pointer to the data that will be written to the file
           3: if None, writes until end of source buffer
              if a scalar then the value is the number of bytes to read
              if a pointer then the value will be the upper bound

The pbuf command is used to write data to a file.  The "buf" value is the
location of the buffer to be written out.  

The optional "val" is the length as described in section 6.4.  A hex 0 in the
buffer will not affect the number of bytes written by this command. 

The "buf" parameter can also be an integer.  If "buf" is an integer then a 
value will be read from the file and assigned to it.  The "val" parameter is 
irrelevant in this case since two characters are read for integers.

Errors:
  20  The file specified by handle [?????] is not open
  69  Length pointer [%s] must point into the memory buffer
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  82  Length Parameter [?????] cannot be a file or label
  87  Parameter [?????] should be a scalar
  90  Parameter [?????] should be a pointer or scalar


     Command: putxt
     Purpose: Put data from a GETXT buffer back onto the screen
Restrictions: None
      Syntax: putxt ptr

This command restores the a window on the screen as saved with a prior getxt
command.  The value passed to it is the pointer which was used with the getxt
command.  The memory associated with the pointer is also freed and the pointer
is set to NULL.


     Command: q
     Purpose: Drop the line and exit to DOS.  Optionally, set errorlevel.
Restrictions: None
      Syntax: q[,errorlevel]
    Argument: If none, errorlevel is 0
              If a scalar, the errorlevel is its value

This command will break the connection with the other 3780 and then exit 
D3-3780.  If a value is specified the DOS errorlevel will be set to that
value.  Otherwise, the errorlevel will be 0.

Errors:
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  70  The value [?????] of parameter 1 is too big, maximum allowed is 255
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  87  Parameter [?????] should be a scalar


     Command: qnz
     Purpose: Conditionally, drop the line and exit the package.
Restrictions: None
      Syntax: qnz

If there was an error on the prior command then this will exit D3-3780 with
the DOS errorlevel set to the same value as the D3-3780 error.  If online,
the line will be dropped.

Errors:
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error


     Command: rdln
     Purpose: Get a line of text from a file and put it into a buffer.
Restrictions: None
      Syntax: rdln handle,ptr[,val]
  Argument 1: The handle of the file to use
           2: A pointer to the location where the line will be copied
           3: Specifies maximum number of characters to copy
              if None, the buffer size is used
              if a scalar then the value is the number of bytes to read
              if a pointer then the value will be the upper bound

The rdln command is used to read a line of data from a file.  The "ptr" value 
is the location of the buffer in which to read the data.  This command will,
normally, read until a carriage return-line feed pair is encountered (this
indicates the end of a line in an ASCII text file).  A subsequent read will
read the next line.  In this way a file can be read a line at a time.

The optional "val" is the maximum number of bytes to read.  It is the same as 
described in section 6.4.

Errors:
  20  The file specified by handle [?????] is not open
  21  At end of file [?????], can't read anymore
  69  Length pointer [%s] must point into the memory buffer
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  87  Parameter [?????] should be a scalar


     Command: read
     Purpose: Read specially formatted data from a file
Restrictions: None
      Syntax: read han,val[;ops][+val[;ops]]...
Argument han: The handle of the file to read from
         val: If a scalar, the value is read in
              If a string, the string is read in
         ops: If none, default read format
              If string, characters determine format

The read command allows the batch programmer to read strings and variable
values from the disk.  The first option is the file handle and the parameters 
following parameters are the same as those for the "rite" command as 
described in section 6.9 above.  These options are somewhat different when
read from than when written out.  This command will only read a single word
(until the next blank or end of line) when it reads in a string so it may
take several string reads to read a string that was written out with one
write.    The numeric values are expected to be in their ASCII string 
equivalent form, (like they would be written out with EDLIN or some other 
word processor) so the files could be modified directly by the user if 
necessary.  This command can be used to read simple configuration files.

Errors:
  20  The file specified by handle [?????] is not open
  21  At end of file [?????], can't read anymore
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  76  The parameter [?????] cannot be assigned to
  87  Parameter [?????] should be a scalar
  90  Parameter [?????] should be a pointer or scalar
  94  Label not allowed in parameter [?????]


     Command: reall
     Purpose: Adjust size of previously allocated memory
Restrictions: None
      Syntax: reall ptr
    Argument: The pointer used in a prior ALLOC or ALLST


     Command: redir
     Purpose: Redirect the output of an individual command to a file
Restrictions: None
      Syntax: reall command
    Argument: The command to be interpreted
    NOT SUPPORTED YET

     Command: redsp
     Purpose: Redisplay the direct video screen
Restrictions: None
      Syntax: redsp


     Command: rem
     Purpose: Give a command to the another copy of D3-3780
Restrictions: Must be communicating with another version of D3-3780.
      Syntax: rem commandstr[+commandstr]...
   Arguments: A string containing any D3-3780 command.  
   
This command is only useful when talking to another copy of D3-3780.  Each
parameter is a string containing a D3-3780 command.  An indefinite number 
of these commands can be strung together using "+" signs.  This can be
especially useful with the "/" command.  

For Example:

  rem "/dir > dummy.txt"+"s dummy.txt"

This would cause the remote to take a local directory and put the output in
the file dummy.txt and then send the resulting file back to the 3780 that
sent the command.  This command can be used to change the remote directory
and execute remote batch files among many other things.

Another Example:

  rem "dp dummy.bat;s"
  s dummy.bat;s
  rem "/dummy"

These commands would send a batch file to the remote and then cause that
file to be executed.  The remote control possibilities here are pretty
extensive (imagine modifying the remote's autoexec.bat).  I will introduce
some more extensive security features to deal with this in the near
future.

Errors:
   1  The remote computer dropped the line
   6  This command cannot be performed unless online
   9  This command cannot be performed until current send is done
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  24  Bad acknowledgment limit exceeded.  Send aborted
  25  Incomplete file sent - Enquiry limit was exceeded
  26  No acknowledgment limit exceeded.  Send aborted
  27  Remote computer aborted send
  64  Unexpected state [???]
  74  At least 2 parameter(s) required for this command
  85  Parameter [?????] should be a string constant or pointer
  93  Insufficient internal memory to process command


     Command: ren
     Purpose: Rename a file or files
Restrictions: None
      Syntax: ren oldspec newspec
  Argument 1: Old value including path and wildcards  
           2: New value including path and wildcards  

This is very similar to DOS' "ren" command except that the paths can be used
to move a file from one directory to another.  The DOS rename will not allow
this.

Errors:
  16  No files found (using [?????])
  17  File [?????] not found
  51  "?????" already exists or invalid path
  60  Wildcards on left must be in same positions as those on right
  74  At least 2 parameter(s) required for this command
  89  Parameter [?????] should be a filename or file specification
  99  Attempt to move a file to another device


     Command: ret
     Purpose: Returns to line after previous CALL command in the file
Restrictions: None
      Syntax: ret

This is the function which returns control after a subroutine has been
called.  Control will return to the line following the most recent internal
"call" command.  Intervening "call" commands to (or within) other command 
files do not effect the behavior of the internal calls.

Errors:
  67  This command is only allowed in batch mode
 103  Return without a call


     Command: rite
     Purpose: Format and write data to screen
Restrictions: None
      Syntax: rite val[;ops][+val[;ops]]...
Argument val: If a scalar, the value is written out
              If a string, the string is written out
         ops: If none, default display format
              If string, characters determine format

The rite command allows the batch programmer to write strings and variable
values to the screen even when display echoing has been suppressed.  The
parameters are described in section 5.7 above.

Errors:
  74  At least 1 parameter(s) required for this command
  90  Parameter [?????] should be a pointer or scalar
  94  Label not allowed in parameter [?????]


     Command: rstrt
     Purpose: Restart the program
Restrictions: None
      Syntax: rstrt
      NOT SUPPORTED, this one may become irrelevant



     Command: s
     Purpose: Send files and buffers to the other 3780
Restrictions: Must be online
      Syntax: s dat[;ops][+dat[;ops]]... ops
Argument dat: If a string, the string is transmitted
              If a file, the file is transmitted
         ops: If none, default values are used
              If string, characters determine values

This is the general purpose send command.  It is used to send a combination 
of strings and files.  The files can include wildcards.  The "ops" strings  
is used to specify details on how to send a file.  The options specify the
buffer type (section 2.2) expected, the destination (printer or punch) and 
whether the remote will receive the files as separate files or all in one.

Like the format option strings, the send option string does not require
quotes and is a list of characters each of which has a meaning.  There 
are two forms of options for this command the (shorter) normal ones
and the more extensive form which can set the more unusual options.
The normal options are:

  S - To send standard mode with the "Vary" buffer type.
  T - To send transparent mode with the "Fixed" buffer type.
  B - To send transparent mode with the "Binary" buffer type.

  C - To concatenate files as they are transmitted (use ETB between files).
      If used on a specific file it will cause that file to be concatenated
      to the next file in the send.
  X - To leave files separate as they are transmitted (use ETX between files)

  P - To Send to the remote printer
  N - To Send to the remote punch

Less common short options:
  H - To send standard mode with the "Hex" buffer type.
  V - To send standard mode with the "Vary" buffer type (same as S).
  F - To send transparent mode with the "Fixed" buffer type (same as T).

Examples:

  s file.txt s             ; Specifies standard with vary buffer type
  s file.txt+file2.txt tc  ; Specifies transparent with fixed buffer type 
                             and sends both files as one file.
  s file.txt nb            ; Specifies transparent with binary buffer type
                             and sends to the remote punch

Note: The order of the options is not important when using the short form.

The long form uses the "S" and "T" followed by either "V", "F", "B" or "H"
to indicate the buffer type and the mode in which it is used precisely.

For example:

  s file.txt sf  ; Specifies that fixed format be used with standard mode

  s "48 65 6C 6C 6F" nth  ; Specifies that the send go to the punch and the 
                            transparent mode be used with hex buffer type

In general, specify the sending mode with an "S" or "T" and then use a "V", 
"F","B" or "H" to specify the buffer type.  The "P","N","C" and "X" options 
can be placed anywhere in the string.

When sending several files with one "s" command, the syntax of this command 
allows one default option string for all the files and specific option 
strings to modify the options for specific files in the list.  The default
option list is at the end and is separated from the list by a blank or a
comma.  The specific option lists should follow the file they modify and be
separated by a semicolon.

For Example:

  s file0.txt;bc+file2.txt;s+file3.txt;t

This command concatenates the first two files and sends the third separate.
Transparent mode and binary buffer type is used for file0, Standard mode
and vary buffer type is used for file2 and transparent mode with fixed
buffer type is used for file3.

  s file0.txt+file1.txt;p+file3.txt ns

This will send file0 and file3 to the remote punch and file1 to the remote 
printer.  These will all all be sent in standard mode with the vary buffer
type.  They will also be sent as separate files.

Note: Concatenating a punch file to a printer file or visa versa will not
      work properly.  Both the files will go to the destination of the
      first and one garbage character may be inserted at the start of the
      second file (a hex 12).

If the options list is left blank then the power up defaults or the buffer
type and destination options from the last send will be used.  The 
concatenation option always resets itself to disabled between send commands.
The power up defaults are to send standard mode with the vary buffer type
to the printer.

Errors:
   1  The remote computer dropped the line
   2  Unable to open file [?????]
   6  This command cannot be performed unless online
   9  This command cannot be performed until current send is done
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  24  Bad acknowledgment limit exceeded.  Send aborted
  25  Incomplete file sent - Enquiry limit was exceeded
  26  No acknowledgment limit exceeded.  Send aborted
  27  Remote computer aborted send
  64  Unexpected state [???]
  72  Filename (and path) is too big in [?????]
  93  Insufficient internal memory to process command
  94  Label not allowed in parameter [?????]
 104  Parameter [?????] must be a string of filename


     Command: save
     Purpose: saves buffer pointed to by ptr to file named by file
Restrictions: None
      Syntax: save ptr,file[,val]
 Arguments 1: A pointer to a buffer (to write)
           2: filename to write out to
           3: If None, copies until a 0 is found or end of destination buffer
              if a scalar then the value is the number of bytes to write
              if a pointer then the value will be the upper bound

The save command is a quick and dirty command to make a file and with the
given data in it.  This command saves you the trouble of having to open 
the file, write to it and then close it.  

The length parameter is as described in section 6.4.  The examples of the
length parameter for the "app" command also apply to the save.

The "ptr" parameter can also be an integer.  If "ptr" is an integer then its 
ASCII equivalent value will be written to the file.  That is, the if the 
integer is a 99 the string "99" will be written to the file.  The "val" 
parameter is irrelevant if "ptr" is not a scalar type.

Errors:
  69  Length pointer [%s] must point into the memory buffer
  74  At least 2 parameter(s) required for this command
  80  Parameter [?????] must be a filename
  82  Length Parameter [?????] cannot be a file or label
  90  Parameter [?????] should be a pointer or scalar
  98  The filename cannot include wildcards


     Command: sdefs
     Purpose: Sets default send buffer type and destinations
Restrictions: None
      Syntax: sdefs ops
    Argument: "ops" value identical to that of the send command.


     Command: seek
     Purpose: Change the location of the file pointer
Restrictions: None
      Syntax: seek handle,wherenum[,refnum]
  Argument 1: The handle of the file
           2: The location to seek to
           3: If none, wherenum is relative to the beginning of the file
              If refnum=1, wherenum is relative to the current location
              If refnum=2, wherenum is relative to the end of the file

When file input/output is performed on files using handles then a file 
pointer is maintained by the system.  This file pointer tells the system 
where to read from or write to the file.  This command moves the file
pointer to a different location.  The third parameter determines whether
the second parameter is relative to the start of the file, the current
location or the end of the file.  The value can be negative and must be if
the location is referenced from the end of the file.

Errors:
  20  The file specified by handle [?????] is not open
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  70  The value [?????] of parameter 3 is too big, maximum allowed is 2
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  71  The value [?????] of parameter 3 is too small, minimum allowed is 0
  74  At least 2 parameter(s) required for this command
  87  Parameter [?????] should be a scalar


     Command: setbf
     Purpose: Set the values of a buffer to a single character
Restrictions: None
      Syntax: setbf buf[;num][,val]
  Argument 1: The buffer in which to set the values
         num: if none, the buffer locations will be set to zero
              if a scalar the buffer locations will be set to its value
         val: Specifies number of locations to set
              if None, length of buf is used
              if a scalar then the value is the number of bytes to set
              if a pointer then the value will be the upper bound

This command is normally used to clear a buffer out.  It can also be used to
set the values in a buffer to some known value.

Errors:
  69  Length pointer [%s] must point into the memory buffer
  70  The value [?????] of parameter 2 is too big, maximum allowed is 255
  71  The value [?????] of parameter 2 is too small, minimum allowed is 0
  74  At least 1 parameter(s) required for this command
  77  Buffer pointer [?????] must have memory allocated to it
  82  Length Parameter [?????] cannot be a file or label
  87  Parameter [?????] should be a scalar


     Command: setpr
     Purpose: Sets the string to be used at the prompt in the window
Restrictions: None
      Syntax: setpr ptr
    Argument: A string or pointer argument
    
I will allow a full argument list at some time (time date etc.)

     Command: sform
     Purpose: Sets the format string for a display variable
Restrictions: None
      Syntax: sform num ptr
  Argument 1: A number indicating which display variable
           2: The new format string


     Command: size
     Purpose: Determine the size of a given file
Restrictions: None
      Syntax: size numlow[;numhigh],file
  Arg numlow: Low integer of file size
     numhigh: High integer of file size (0 if filesize < 65535 )
        file: The name of the file

This command is used to check the size of a file.  The optional numhigh
parameter is used if dealing with a very large file.  An error will be 
produced if numhigh is not included and the file is too large to put in
an integer.

Errors:
   2  Unable to open file [?????]
  28  File is too large for an integer to store its length
  74  At least 2 parameter(s) required for this command
  80  Parameter [?????] must be a filename
  81  The value in parameter 1,[?????] cannot be assigned an integer
  81  The value in parameter 2,[?????] cannot be assigned an integer
  98  The filename cannot include wildcards


     Command: slen
     Purpose: Determine the length of a string
Restrictions: None
      Syntax: slen num,str
  Argument 1: The number to be assigned the length
           2: The string whose length is being checked

This command is used to check the length of a string.

Errors:
  85  Parameter [?????] should be a string constant or pointer
  86  This command requires 2 parameter(s)
  88  The parameter [?????] cannot be assigned a scalar


     Command: smask
     Purpose: Sets the mask for a display variable
Restrictions: None
      Syntax: smask num mask
  Argument 1: A number indicating which display variable
           2: A bit mapped number which indicates when the variable should
              be updated


     Command: smax
     Purpose: Sets the maximum length for a display variable
Restrictions: None
      Syntax: smax num len
  Argument 1: A number indicating which display variable
           2: The maximum number of chars to display


     Command: so
     Purpose: Sends modem's options to modem
Restrictions: The modem cannot be online
      Syntax: so file|ptr
    Argument: If a file, it contents are converted to hex and sent
              If a string, then the strings contents are converted and sent

This command is used to send modem option settings from a file.  The
should contain ASCII text which represents hex option bytes ("AA" to
mean hex AA).  This can be used to send previously determined options which
are generated with a word processor.  A more elegant way of setting up
the options interactively will be added soon (It will probably include
a way to write files out which this command can send to the modem).

Errors:
   2  Unable to open file [?????]
   7  This command cannot be performed while online
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  98  The filename cannot include wildcards
 104  Parameter [?????] must be a string of filename


     Command: sptr
     Purpose: Subtracts two pointers and assigns the difference to an integer
Restrictions: None
      Syntax: sptr num,ptrbigger,ptrsmaller
  Argument 1: The number to receive the value
           2: The left operand in the subtraction
           3: The right operand in the subtraction

This command can be represented as "num=ptrbigger-ptrsmaller".  It is useful
for determining the number of locations between any two pointers.  The result
will be negative if ptrsmaller>ptrbigger.

Errors:
  85  Parameter [?????] should be a string constant or pointer
  88  The parameter [?????] cannot be assigned a scalar


     Command: sptyp
     Purpose: Sets conditionals for working with special hardware
Restrictions: None
      Syntax: sptyp num
    Argument: A character which specifies use with a multiprotocol card or
              out the DTE port of the modem.


     Command: srite
     Purpose: Format and write data to a string
Restrictions: None
      Syntax: srite str,val[;ops][+val[;ops]]...
Argument str: The string to write the formatted string to.
         val: If a scalar, the value is written out
              If a string, the string is written out
         ops: If none, default format
              If string, characters determine format

The srite command allows the batch programmer to write strings and variable
values out to another string.  The first option is the string (buffer) and 
the parameters following parameters are the same as those for the "rite" 
command as described in section 6.9 above.  This command is useful when
constructing strings for filenames and to compare with incoming values.

Errors:
  74  At least 1 parameter(s) required for this command
  77  Buffer pointer [?????] must have memory allocated to it
  90  Parameter [?????] should be a pointer or scalar
  94  Label not allowed in parameter [?????]


     Command: ss
     Purpose: Send status to the remote 3780
Restrictions: The modem must be online
      Syntax: ss

This command sends a variety of status information to the remote 3780.  It
is mainly useful as a remote command when talking to another copy of
D3-3780.  The information that is sent is identical to the "ST" status 
command which merely displays the data.

Errors:
   1  The remote computer dropped the line
   6  This command cannot be performed unless online
   9  This command cannot be performed until current send is done
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  24  Bad acknowledgment limit exceeded.  Send aborted
  25  Incomplete file sent - Enquiry limit was exceeded
  26  No acknowledgment limit exceeded.  Send aborted
  27  Remote computer aborted send
  64  Unexpected state [???]
  93  Insufficient internal memory to process command


     Command: st
     Purpose: Display status information
Restrictions: None
      Syntax: st

This command displays a variety of status information on the screen.  The
values in it are updated dynamically during a reception.  No possible
errors with this command.


     Command: stc
     Purpose: Scan a string for the first occurrence of a character.
Restrictions: None
      Syntax: stc destptr,sourcestr,char
  Argument 1: The pointer variable which is assigned the result
           2: The string which is being searched
           3: The character which is to be matched

This command is used to determine the first location in a string that
contains a certain character.  If the string doesn't have the character
in it anywhere then the destptr will be set to point to the "0" that
terminates the string.

Errors:
  70  The value [?????] of parameter 3 is too big, maximum allowed is 255
  71  The value [?????] of parameter 3 is too small, minimum allowed is 0
  84  Parameter [?????] should be a pointer variable
  85  Parameter [?????] should be a string constant or pointer
  87  Parameter [?????] should be a scalar


     Command: stoff
     Purpose: Turns off all status variable display
Restrictions: None
      Syntax: stoff

     Command: ston
     Purpose: Turns on all status variable display
Restrictions: None
      Syntax: ston


     Command: stst
     Purpose: Scan a string for the first occurrence of a substring.
Restrictions: None
      Syntax: stst destptr,sourcestr,substr
  Argument 1: The pointer variable which is assigned the result
           2: The string which is being searched
           3: The substring which is to be matched

This command is used to determine the first location the beginning of a
substring in a string.  If the string substring doesn't occur anywhere in
the sourcestr the destptr will be set to point to the "0" that terminates 
the string.

Errors:
  84  Parameter [?????] should be a pointer variable
  85  Parameter [?????] should be a string constant or pointer
  87  Parameter [?????] should be a scalar


     Command: sup
     Purpose: Suppress command window screen writes
Restrictions: Batch Only
      Syntax: sup

This command is used to suppress all video output except "rite" and "key"
statements.  It gives the batch programmer extensive control over what
appears in the command window.

Error:
  67  This command is only allowed in batch mode


     Command: svals
     Purpose: Sends the values of internal variables to the remote
Restrictions: The modem must be online
      Syntax: svals

This command sends a variety of status information to the remote 3780.  It
is mainly useful as a remote command when talking to another copy of
D3-3780.  The information that is sent is identical to the "VALS" status 
command which merely displays the data.  The information is a dump of
several of the batch language internal variables.

Errors:
   1  The remote computer dropped the line
   6  This command cannot be performed unless online
   9  This command cannot be performed until current send is done
  15  The modem is not able to transmit, It will not raise CTS
  18  The modem is not able to transmit, SCC TX buffer error
  24  Bad acknowledgment limit exceeded.  Send aborted
  25  Incomplete file sent - Enquiry limit was exceeded
  26  No acknowledgment limit exceeded.  Send aborted
  27  Remote computer aborted send
  64  Unexpected state [???]
  93  Insufficient internal memory to process command


     Command: tabls
     Purpose: Loads new conversion table from ASCII file
Restrictions: None
      Syntax: tabls filename
      NOT SUPPORTED YET (note:The tables can be modified using variables)


     Command: td
     Purpose: Displays the current time and date
Restrictions: None
      Syntax: td

This command displays the current time and date.  It is mainly useful for
logging that information in a batch file when a list file is being used.
No errors are possible with this command.


     Command: tell
     Purpose: Get the location of the file pointer
Restrictions: None
      Syntax: tell handle,varnum
  Argument 1: The handle of the file
           2: The variable to assign the file pointer value to.

When file input/output is performed on files using handles then a file 
pointer is maintained by the system.  This file pointer tells the system 
where to read from or write to the file.  This command tells how far the
file pointer is from the beginning of the file.

Errors:
  20  The file specified by handle [?????] is not open
  70  The value [?????] of parameter 1 is too big, maximum allowed is 9
  71  The value [?????] of parameter 1 is too small, minimum allowed is 0
  86  This command requires 2 parameter(s)
  87  Parameter [?????] should be a scalar
  88  The parameter [?????] cannot be assigned a scalar


     Command: tk
     Purpose: Talk (verbally) to the person at the remote 3780
Restrictions: Must be online
      Syntax: tk

This command is used to engage in verbal conversation with the remote
user.  It is not supported yet.  No errors yet also.


     Command: tr
     Purpose: Store a record of exactly what goes on the line, a trace.
Restrictions: None
      Syntax: tr

This command is used for line diagnostics.  It keeps a record of exactly
what is communicated on the line.  The tr command works as a toggle.
If the trace is enabled then the command will disable it.  If the trace is
disabled then the command will enable it.  The command is not supported yet
and does not have any errors yet either.


     Command: uncmp 
     Purpose: Reverses runlength compression of a file (opposite of comp) 
Restrictions: None
      Syntax: uncmp sourcefile,destfile
  Argument 1: File to uncompress
           2: Name to use for resulting file
		 

     Command: undsp
     Purpose: Restore the direct video display after a "dsup" command
Restrictions: None
      Syntax: unsup



     Command: unsup
     Purpose: Restore the video display after a "sup" command
Restrictions: None
      Syntax: unsup

This command is used to reverse the effect of the "sup" command.  Thus, it
restores the video back to normal.

Error:
  67  This command is only allowed in batch mode


     Command: upr
     Purpose: Makes a string of scalar upper-case
Restrictions: None
      Syntax: upr val
    Argument: If a string the whole string will be made upper-case
              If an integer or character just the character will be made
                upper-case

This command is just like is sounds.  Characters that non alphabetic or
already are upper case are not affected.

Error:
  76  The parameter [?????] cannot be assigned to


     Command: vals
     Purpose: Display the values of the internal batch variables
Restrictions: None
      Syntax: vals

This is a diagnostic command for displaying the values of the built in
D3-3780 variables (i0-i9,p0-p9,db,etc.).  No errors can be generated by this
command.


     Command: vtype
     Purpose: Set display type to direct or through BIOS
Restrictions: None
      Syntax: vtype[ ch]
    Argument: if 'B' then BIOS will be used otherwise direct ram writes will
              be used.


     Command: w
     Purpose: Wait to receive a file or files from the remote
Restrictions: Must be online
      Syntax: w,timeout
    Argument: The maximum number of seconds to wait before a transmission
              is initiated.

This command is used to receive a transmission from the remote.  More
than one file can be sent in a transmission since the end of the transmission 
is signaled by an EOT character from the remote, files are separated by ETX 
characters.  If auto-naming is enabled the n# and p# variables can be used to
determine whether multiple files were received.

Errors:
   1  The remote computer dropped the line
  10  Disk error, See if disk is full
  12  Idle timeout during receive
  14  No activity timeout exceeded
  22  No acknowledgment limit exceeded.  Receive aborted
  23  Remote aborted receive
  64  Unexpected state [???]
  67  This command is only allowed in batch mode
  87  Parameter [?????] should be a scalar


     Command: xb
     Purpose: Execute (chain to) another batch (command) file
Restrictions: None
      Syntax: xb file
    Argument: The file to execute

This command is used to chain to another batch file on disk.  It is somewhat
limited in batch mode in that it will not return to the calling batch file.
In interactive mode this command is useful for automating sequences that
are used frequently.  When in batch mode, the line following the "XB" should
never execute.

Errors:
   2  Unable to open file [?????]
  80  Parameter [?????] must be a filename
  98  The filename cannot include wildcards

Possible New commands
----------------------------------------
command which tells exactly how many blocks a file transmission will take
command which transmits to the remote how many blocks a file would take
  at the current blocksize
Relative Branch Facility
number of records in a block
number of blocks in a file
math function, takes an equation on far left ex.
  math %i0,%i0+5*%i1+6*%i2-~%i3
Scripts take command line arguments
Pass variables from one script to another
  Already can pass values from one script to another by the values in
  the global variables.
  Local variables, put in variables that are maintained across remote
    calls to subroutines or scripts.
Emits an Audible Tone (frequency, duration)
Persist Error variable,
Line of persist error variable
Double variable containing both of the above variables
Functions for inputting strings and integers
Functions which allow access to wildcard based filenames
  findfirst, findnext, etc.